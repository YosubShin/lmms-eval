#!/usr/bin/env bash
set -euo pipefail

log() {
  printf '[setup_env] %s\n' "$*" >&2
}

if [[ "${SETUP_ENV_DEBUG:-0}" == "1" ]]; then
  log "Debug tracing enabled via SETUP_ENV_DEBUG"
  set -x
fi

# Root of the project snapshot (contains repo/ and run_metadata/)
PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
log "PROJECT_ROOT=${PROJECT_ROOT}"

# Shared uv-managed environment (overridable via KOA_SHARED_ENV); lives outside job snapshots
SHARED_ENV_DIR="${KOA_SHARED_ENV:-${PROJECT_ROOT}/../envs/uv}"
mkdir -p "${SHARED_ENV_DIR}"
ENV_PYTHON="${SHARED_ENV_DIR}/bin/python"
log "SHARED_ENV_DIR=${SHARED_ENV_DIR}"

# Cache location for environment hashes (used to detect changes between runs)
ENV_CACHE_DIR="${SHARED_ENV_DIR}/.koa"
ENV_HASH_CACHE="${ENV_CACHE_DIR}/env_hashes.json"
log "ENV_CACHE_DIR=${ENV_CACHE_DIR}"

# Locate the manifest generated by `koa submit` (contains env_hashes.json)
RUN_METADATA_DIR="${KOA_RUN_METADATA_DIR:-}"
if [[ -z "${RUN_METADATA_DIR}" && -n "${KOA_RUN_DIR:-}" ]]; then
  RUN_METADATA_DIR="${KOA_RUN_DIR}/run_metadata"
fi
if [[ -z "${RUN_METADATA_DIR}" && -n "${KOA_ML_RESULTS_ROOT:-}" && -n "${SLURM_JOB_ID:-}" ]]; then
  RUN_METADATA_DIR="${KOA_ML_RESULTS_ROOT}/${SLURM_JOB_ID}/run_metadata"
fi
if [[ -n "${RUN_METADATA_DIR}" ]]; then
  log "RUN_METADATA_DIR=${RUN_METADATA_DIR}"
else
  log "RUN_METADATA_DIR not provided"
fi

# Load any configured modules (edit these if your project needs different toolchains)
module purge >/dev/null 2>&1 || true
module load lang/Python/3.11.5-GCCcore-13.2.0 >/dev/null 2>&1 || true
module load system/CUDA/12.2.0 >/dev/null 2>&1 || true
log "Requested modules loaded (Python 3.11.5, CUDA 12.2.0)"

# Prefer python3, fall back to python
python_bin="$(command -v python3 || command -v python)"
log "python_bin=${python_bin:-<not found>}"

if [[ -z "${python_bin}" ]]; then
  echo "No python interpreter found" >&2
  exit 1
fi

# Determine whether we need to rebuild or refresh the shared environment
recreate=0
if [[ ! -x "${ENV_PYTHON}" ]]; then
  log "Environment interpreter ${ENV_PYTHON} missing; forcing recreate"
  recreate=1
fi

ENV_HASH_SOURCE=""
if [[ -n "${RUN_METADATA_DIR}" && -f "${RUN_METADATA_DIR}/env_hashes.json" ]]; then
  ENV_HASH_SOURCE="${RUN_METADATA_DIR}/env_hashes.json"
  log "Found env hash source at ${ENV_HASH_SOURCE}"
else
  log "No env hash source available"
fi

# Compare the last synced env hashes with the current ones; rebuild if they differ
if [[ "${recreate}" -eq 0 && -n "${ENV_HASH_SOURCE}" ]]; then
  mkdir -p "${ENV_CACHE_DIR}"
  if [[ ! -f "${ENV_HASH_CACHE}" ]] || ! cmp -s "${ENV_HASH_SOURCE}" "${ENV_HASH_CACHE}"; then
    log "Env hash cache differs or missing; forcing recreate"
    recreate=1
  else
    log "Env hash cache matches; reuse existing environment"
  fi
fi

if [[ "${recreate}" -eq 1 ]]; then
  log "Recreating shared environment at ${SHARED_ENV_DIR}"
  # Ensure uv is available for managing the shared environment
  if ! "${python_bin}" -m uv --help >/dev/null 2>&1; then
    log "uv not detected for ${python_bin}; attempting user install"
    "${python_bin}" -m pip install --user --upgrade uv
    log "uv installation attempt completed with exit code $?"
  else
    log "uv already available for ${python_bin}"
  fi

  # (Re)create the uv-managed environment and install dependencies from this repo snapshot
  log "Creating uv virtualenv with interpreter ${python_bin}"
  "${python_bin}" -m uv venv --python "${python_bin}" "${SHARED_ENV_DIR}"
  log "Installing project dependencies into ${ENV_PYTHON}"
  "${python_bin}" -m uv pip install --python "${ENV_PYTHON}" .
  log "Installing extra runtime dependencies into ${ENV_PYTHON}"
  "${python_bin}" -m uv pip install --python "${ENV_PYTHON}" vllm==0.11.0 qwen-vl-utils

  if [[ -n "${ENV_HASH_SOURCE}" ]]; then
    mkdir -p "${ENV_CACHE_DIR}"
    cp "${ENV_HASH_SOURCE}" "${ENV_HASH_CACHE}"
    log "Updated env hash cache at ${ENV_HASH_CACHE}"
  fi
else
  log "Shared environment already up to date; skipping rebuild"
fi

# Activate the shared environment for the rest of the job
# log "Activating environment: source ${SHARED_ENV_DIR}/bin/activate"
# source "${SHARED_ENV_DIR}/bin/activate"
# log "Environment activation complete; python=$(command -v python)"

# Optionally pre-compile Python files (safe to remove if not needed)
python -m compileall "${PROJECT_ROOT}" >/dev/null 2>&1 || true
log "Completed optional bytecode compilation"
