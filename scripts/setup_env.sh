#!/usr/bin/env bash
set -euo pipefail

# Root of the project snapshot (contains repo/ and run_metadata/)
PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
VENV_DIR="${PROJECT_ROOT}/.venv"

# Cache location for environment hashes (used to detect changes between runs)
ENV_CACHE_DIR="${PROJECT_ROOT}/.koa"
ENV_HASH_CACHE="${ENV_CACHE_DIR}/env_hashes.json"

# Locate the manifest generated by `koa submit` (contains env_hashes.json)
RUN_METADATA_DIR="${KOA_RUN_METADATA_DIR:-}"
if [[ -z "${RUN_METADATA_DIR}" && -n "${KOA_ML_RESULTS_ROOT:-}" && -n "${SLURM_JOB_ID:-}" ]]; then
  RUN_METADATA_DIR="${KOA_ML_RESULTS_ROOT}/${SLURM_JOB_ID}/run_metadata"
fi

# Load any configured modules (edit these if your project needs different toolchains)
module purge >/dev/null 2>&1 || true
module load lang/Python/3.11.5-GCCcore-13.2.0 >/dev/null 2>&1 || true
module load system/CUDA/12.2.0 >/dev/null 2>&1 || true

# Prefer python3, fall back to python
python_bin="$(command -v python3 || command -v python)"

if [[ -z "${python_bin}" ]]; then
  echo "No python interpreter found" >&2
  exit 1
fi

# Determine whether we need to rebuild the virtualenv
recreate=0
if [[ ! -d "${VENV_DIR}" ]]; then
  recreate=1
fi

ENV_HASH_SOURCE=""
if [[ -n "${RUN_METADATA_DIR}" && -f "${RUN_METADATA_DIR}/env_hashes.json" ]]; then
  ENV_HASH_SOURCE="${RUN_METADATA_DIR}/env_hashes.json"
fi

# Compare the last synced env hashes with the current ones; rebuild if they differ
if [[ "${recreate}" -eq 0 && -n "${ENV_HASH_SOURCE}" ]]; then
  mkdir -p "${ENV_CACHE_DIR}"
  if [[ ! -f "${ENV_HASH_CACHE}" ]] || ! cmp -s "${ENV_HASH_SOURCE}" "${ENV_HASH_CACHE}"; then
    recreate=1
  fi
fi

if [[ "${recreate}" -eq 1 ]]; then
  # (Re)create the virtualenv and install dependencies
  rm -rf "${VENV_DIR}"
  "${python_bin}" -m venv "${VENV_DIR}"
  source "${VENV_DIR}/bin/activate"
  pip install --upgrade pip setuptools wheel
  if [[ -f "${PROJECT_ROOT}/requirements.txt" ]]; then
    pip install -r "${PROJECT_ROOT}/requirements.txt"
  fi
  if [[ -n "${ENV_HASH_SOURCE}" ]]; then
    cp "${ENV_HASH_SOURCE}" "${ENV_HASH_CACHE}"
  fi
else
  # Reuse the existing virtualenv
  source "${VENV_DIR}/bin/activate"
fi

# Optionally pre-compile Python files (safe to remove if not needed)
python -m compileall "${PROJECT_ROOT}" >/dev/null 2>&1 || true
